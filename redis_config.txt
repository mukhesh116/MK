import java.util.Map;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.serializer.GenericToStringSerializer;

import com.goomo.currency.constants.AppConstant;

import lombok.extern.slf4j.Slf4j;
import redis.clients.jedis.JedisPoolConfig;

@Configuration("redisConfig")
@Primary
@Slf4j
public class RedisConfig {
	
	@Value("${redis.hostname}")
	private String redisHostName;

	@Value("${redis.port}")
	private String redisPort;
	
	@Value("${spring.profiles.active}")
	private String domain;
	
	@SuppressWarnings("deprecation")
	@Bean
    public JedisConnectionFactory jedisConnectionFactory() throws Exception {
		log.info("RedisConfig :: jedisConnectionFactory() :: Init ");
		log.info("RedisConfig :: jedisConnectionFactory() :: Domain  " + domain);
		if (domain != null && !domain.isEmpty() && !domain.equalsIgnoreCase("dev")) {
			Map<String, String> env = System.getenv();
			redisHostName = env.get(AppConstant.REDIS_HOST_NAME);
			redisPort = env.get(AppConstant.REDIS_PORT);
		}
		System.out.println("redis host >>> "+redisHostName);
		System.out.println("redis port >>> "+redisPort);
		JedisPoolConfig poolConfig = new JedisPoolConfig();
		poolConfig.setMaxTotal(5);
		poolConfig.setTestOnBorrow(true);
		poolConfig.setTestOnReturn(true);
		JedisConnectionFactory factory = new JedisConnectionFactory(poolConfig);
		factory.setHostName(redisHostName);
		factory.setPort(Integer.valueOf(redisPort));
		factory.setUsePool(true);
		log.info("RedisConfig :: jedisConnectionFactory() :: Ends ");
        return factory;
    }
	
	@Bean
    public RedisTemplate<Object, Object> redisTemplate() throws Exception {
        final RedisTemplate<Object, Object> template = new RedisTemplate<Object, Object>();
        template.setConnectionFactory(jedisConnectionFactory());
        template.setValueSerializer(new GenericToStringSerializer<Object>(Object.class));
        return template;
    }

}
------------------------------------------------------------------------------------


import java.util.Collections;
import java.util.List;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.HashOperations;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Repository;

import com.goomo.currency.constants.AppConstant;
import com.goomo.currency.entity.CountryMasterEntity;
import com.goomo.currency.entity.CurrencyDetailEntity;
import com.goomo.currency.entity.ToleranceDetailEntity;

import lombok.extern.slf4j.Slf4j;
import redis.clients.jedis.Jedis;
import redis.clients.jedis.exceptions.JedisConnectionException;

@Repository
@Slf4j
public class RedisConfigRepository {
	
	private HashOperations<Object, Object, CurrencyDetailEntity> currencyHashOperations;
	private HashOperations<Object, Object, List<ToleranceDetailEntity>> toleranceHashOperations;
	
    
	private RedisTemplate<Object, Object> redisTemplate;

	@Autowired
	public RedisConfigRepository(RedisTemplate<Object, Object> redisTemplate) {
		this.redisTemplate = redisTemplate;
	}
	
	@PostConstruct
	private void init() {
		currencyHashOperations = redisTemplate.opsForHash();
		toleranceHashOperations = redisTemplate.opsForHash();
	}

	public  void putCurrencyDetail(CurrencyDetailEntity model) {
		currencyHashOperations.put(model.getCountryId().getCountryCode(), AppConstant.REDIS_HASH_ID_CURRENCY, model);
	}
	
	public List<CurrencyDetailEntity> findCurrencyDetail(CountryMasterEntity entity) {
		CurrencyDetailEntity currenccyDetailEntity = currencyHashOperations.get(entity.getCountryCode(),AppConstant.REDIS_HASH_ID_CURRENCY);
		return Collections.singletonList(currenccyDetailEntity);
	}
	
	public void putTolerateDetail(List<ToleranceDetailEntity> list, ToleranceDetailEntity toleranceDetailEntity) {
		toleranceHashOperations.put(toleranceDetailEntity.getCountryMasterEntity(), AppConstant.REDIS_HASH_ID_TOLERANCE, list);
	}
	
	public List<ToleranceDetailEntity> findTolerateDetail(CountryMasterEntity entity) {
		return (List<ToleranceDetailEntity>) toleranceHashOperations.get(entity,AppConstant.REDIS_HASH_ID_TOLERANCE);
	}
	
	public List<List<ToleranceDetailEntity>> findAllToleranceCacheData(CountryMasterEntity entity) {
		return	toleranceHashOperations.values(entity);
	 
	}
	
	public List<CurrencyDetailEntity> findAllCurrencyCacheData(CountryMasterEntity entity) {
		return	currencyHashOperations.values(entity.getCountryCode());
	 
	}
	
	public boolean isConnected(String redisHostName,String redisPort) {
		log.info("RediHostName :: " + redisHostName + " RedisPort :: " + redisPort );
		boolean connected = false;
		Jedis jedis = null;
		try {
			jedis = new Jedis(redisHostName, Integer.parseInt(redisPort));
			if (jedis.ping().equals(AppConstant.PONG)) {
				connected = true;
			}
			log.info("Successfully connect to redis server ");
		} catch (JedisConnectionException e) {
			log.error("Unable to connect redis server and the exception follows :: " + e );
			connected = false;
		} finally{
			if(jedis!= null){
				jedis.close();
			}
		}
		return connected;
	}

	
	
}
